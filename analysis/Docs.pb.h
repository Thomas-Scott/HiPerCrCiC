// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: docs.proto

#ifndef PROTOBUF_docs_2eproto__INCLUDED
#define PROTOBUF_docs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace Pages {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_docs_2eproto();
void protobuf_AssignDesc_docs_2eproto();
void protobuf_ShutdownFile_docs_2eproto();

class Page;
class Page_Fragment;
class Author;
class Date;

// ===================================================================

class Page_Fragment : public ::google::protobuf::Message {
 public:
  Page_Fragment();
  virtual ~Page_Fragment();
  
  Page_Fragment(const Page_Fragment& from);
  
  inline Page_Fragment& operator=(const Page_Fragment& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Page_Fragment& default_instance();
  
  void Swap(Page_Fragment* other);
  
  // implements Message ----------------------------------------------
  
  Page_Fragment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Page_Fragment& from);
  void MergeFrom(const Page_Fragment& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string text = 1;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 1;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  
  // @@protoc_insertion_point(class_scope:Pages.Page.Fragment)
 private:
  inline void set_has_text();
  inline void clear_has_text();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* text_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_docs_2eproto();
  friend void protobuf_AssignDesc_docs_2eproto();
  friend void protobuf_ShutdownFile_docs_2eproto();
  
  void InitAsDefaultInstance();
  static Page_Fragment* default_instance_;
};
// -------------------------------------------------------------------

class Page : public ::google::protobuf::Message {
 public:
  Page();
  virtual ~Page();
  
  Page(const Page& from);
  
  inline Page& operator=(const Page& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Page& default_instance();
  
  void Swap(Page* other);
  
  // implements Message ----------------------------------------------
  
  Page* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Page& from);
  void MergeFrom(const Page& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Page_Fragment Fragment;
  
  // accessors -------------------------------------------------------
  
  // required string uri = 1;
  inline bool has_uri() const;
  inline void clear_uri();
  static const int kUriFieldNumber = 1;
  inline const ::std::string& uri() const;
  inline void set_uri(const ::std::string& value);
  inline void set_uri(const char* value);
  inline void set_uri(const char* value, size_t size);
  inline ::std::string* mutable_uri();
  inline ::std::string* release_uri();
  
  // repeated string title = 2;
  inline int title_size() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title(int index) const;
  inline ::std::string* mutable_title(int index);
  inline void set_title(int index, const ::std::string& value);
  inline void set_title(int index, const char* value);
  inline void set_title(int index, const char* value, size_t size);
  inline ::std::string* add_title();
  inline void add_title(const ::std::string& value);
  inline void add_title(const char* value);
  inline void add_title(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& title() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_title();
  
  // repeated .Pages.Page.Fragment fragment = 3;
  inline int fragment_size() const;
  inline void clear_fragment();
  static const int kFragmentFieldNumber = 3;
  inline const ::Pages::Page_Fragment& fragment(int index) const;
  inline ::Pages::Page_Fragment* mutable_fragment(int index);
  inline ::Pages::Page_Fragment* add_fragment();
  inline const ::google::protobuf::RepeatedPtrField< ::Pages::Page_Fragment >&
      fragment() const;
  inline ::google::protobuf::RepeatedPtrField< ::Pages::Page_Fragment >*
      mutable_fragment();
  
  // repeated .Pages.Date date = 4;
  inline int date_size() const;
  inline void clear_date();
  static const int kDateFieldNumber = 4;
  inline const ::Pages::Date& date(int index) const;
  inline ::Pages::Date* mutable_date(int index);
  inline ::Pages::Date* add_date();
  inline const ::google::protobuf::RepeatedPtrField< ::Pages::Date >&
      date() const;
  inline ::google::protobuf::RepeatedPtrField< ::Pages::Date >*
      mutable_date();
  
  // repeated .Pages.Author author = 5;
  inline int author_size() const;
  inline void clear_author();
  static const int kAuthorFieldNumber = 5;
  inline const ::Pages::Author& author(int index) const;
  inline ::Pages::Author* mutable_author(int index);
  inline ::Pages::Author* add_author();
  inline const ::google::protobuf::RepeatedPtrField< ::Pages::Author >&
      author() const;
  inline ::google::protobuf::RepeatedPtrField< ::Pages::Author >*
      mutable_author();
  
  // @@protoc_insertion_point(class_scope:Pages.Page)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* uri_;
  ::google::protobuf::RepeatedPtrField< ::std::string> title_;
  ::google::protobuf::RepeatedPtrField< ::Pages::Page_Fragment > fragment_;
  ::google::protobuf::RepeatedPtrField< ::Pages::Date > date_;
  ::google::protobuf::RepeatedPtrField< ::Pages::Author > author_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_docs_2eproto();
  friend void protobuf_AssignDesc_docs_2eproto();
  friend void protobuf_ShutdownFile_docs_2eproto();
  
  void InitAsDefaultInstance();
  static Page* default_instance_;
};
// -------------------------------------------------------------------

class Author : public ::google::protobuf::Message {
 public:
  Author();
  virtual ~Author();
  
  Author(const Author& from);
  
  inline Author& operator=(const Author& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Author& default_instance();
  
  void Swap(Author* other);
  
  // implements Message ----------------------------------------------
  
  Author* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Author& from);
  void MergeFrom(const Author& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string first = 1;
  inline int first_size() const;
  inline void clear_first();
  static const int kFirstFieldNumber = 1;
  inline const ::std::string& first(int index) const;
  inline ::std::string* mutable_first(int index);
  inline void set_first(int index, const ::std::string& value);
  inline void set_first(int index, const char* value);
  inline void set_first(int index, const char* value, size_t size);
  inline ::std::string* add_first();
  inline void add_first(const ::std::string& value);
  inline void add_first(const char* value);
  inline void add_first(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& first() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_first();
  
  // repeated string last = 2;
  inline int last_size() const;
  inline void clear_last();
  static const int kLastFieldNumber = 2;
  inline const ::std::string& last(int index) const;
  inline ::std::string* mutable_last(int index);
  inline void set_last(int index, const ::std::string& value);
  inline void set_last(int index, const char* value);
  inline void set_last(int index, const char* value, size_t size);
  inline ::std::string* add_last();
  inline void add_last(const ::std::string& value);
  inline void add_last(const char* value);
  inline void add_last(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& last() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_last();
  
  // repeated string middle = 3;
  inline int middle_size() const;
  inline void clear_middle();
  static const int kMiddleFieldNumber = 3;
  inline const ::std::string& middle(int index) const;
  inline ::std::string* mutable_middle(int index);
  inline void set_middle(int index, const ::std::string& value);
  inline void set_middle(int index, const char* value);
  inline void set_middle(int index, const char* value, size_t size);
  inline ::std::string* add_middle();
  inline void add_middle(const ::std::string& value);
  inline void add_middle(const char* value);
  inline void add_middle(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& middle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_middle();
  
  // @@protoc_insertion_point(class_scope:Pages.Author)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> first_;
  ::google::protobuf::RepeatedPtrField< ::std::string> last_;
  ::google::protobuf::RepeatedPtrField< ::std::string> middle_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_docs_2eproto();
  friend void protobuf_AssignDesc_docs_2eproto();
  friend void protobuf_ShutdownFile_docs_2eproto();
  
  void InitAsDefaultInstance();
  static Author* default_instance_;
};
// -------------------------------------------------------------------

class Date : public ::google::protobuf::Message {
 public:
  Date();
  virtual ~Date();
  
  Date(const Date& from);
  
  inline Date& operator=(const Date& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Date& default_instance();
  
  void Swap(Date* other);
  
  // implements Message ----------------------------------------------
  
  Date* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Date& from);
  void MergeFrom(const Date& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 year = 1;
  inline bool has_year() const;
  inline void clear_year();
  static const int kYearFieldNumber = 1;
  inline ::google::protobuf::uint32 year() const;
  inline void set_year(::google::protobuf::uint32 value);
  
  // optional uint32 month = 2;
  inline bool has_month() const;
  inline void clear_month();
  static const int kMonthFieldNumber = 2;
  inline ::google::protobuf::uint32 month() const;
  inline void set_month(::google::protobuf::uint32 value);
  
  // optional uint32 day = 3;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 3;
  inline ::google::protobuf::uint32 day() const;
  inline void set_day(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:Pages.Date)
 private:
  inline void set_has_year();
  inline void clear_has_year();
  inline void set_has_month();
  inline void clear_has_month();
  inline void set_has_day();
  inline void clear_has_day();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 year_;
  ::google::protobuf::uint32 month_;
  ::google::protobuf::uint32 day_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_docs_2eproto();
  friend void protobuf_AssignDesc_docs_2eproto();
  friend void protobuf_ShutdownFile_docs_2eproto();
  
  void InitAsDefaultInstance();
  static Date* default_instance_;
};
// ===================================================================


// ===================================================================

// Page_Fragment

// required string text = 1;
inline bool Page_Fragment::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Page_Fragment::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Page_Fragment::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Page_Fragment::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& Page_Fragment::text() const {
  return *text_;
}
inline void Page_Fragment::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void Page_Fragment::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void Page_Fragment::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Page_Fragment::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* Page_Fragment::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Page

// required string uri = 1;
inline bool Page::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Page::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Page::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Page::clear_uri() {
  if (uri_ != &::google::protobuf::internal::kEmptyString) {
    uri_->clear();
  }
  clear_has_uri();
}
inline const ::std::string& Page::uri() const {
  return *uri_;
}
inline void Page::set_uri(const ::std::string& value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::kEmptyString) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
}
inline void Page::set_uri(const char* value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::kEmptyString) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
}
inline void Page::set_uri(const char* value, size_t size) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::kEmptyString) {
    uri_ = new ::std::string;
  }
  uri_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Page::mutable_uri() {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::kEmptyString) {
    uri_ = new ::std::string;
  }
  return uri_;
}
inline ::std::string* Page::release_uri() {
  clear_has_uri();
  if (uri_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uri_;
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string title = 2;
inline int Page::title_size() const {
  return title_.size();
}
inline void Page::clear_title() {
  title_.Clear();
}
inline const ::std::string& Page::title(int index) const {
  return title_.Get(index);
}
inline ::std::string* Page::mutable_title(int index) {
  return title_.Mutable(index);
}
inline void Page::set_title(int index, const ::std::string& value) {
  title_.Mutable(index)->assign(value);
}
inline void Page::set_title(int index, const char* value) {
  title_.Mutable(index)->assign(value);
}
inline void Page::set_title(int index, const char* value, size_t size) {
  title_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Page::add_title() {
  return title_.Add();
}
inline void Page::add_title(const ::std::string& value) {
  title_.Add()->assign(value);
}
inline void Page::add_title(const char* value) {
  title_.Add()->assign(value);
}
inline void Page::add_title(const char* value, size_t size) {
  title_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Page::title() const {
  return title_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Page::mutable_title() {
  return &title_;
}

// repeated .Pages.Page.Fragment fragment = 3;
inline int Page::fragment_size() const {
  return fragment_.size();
}
inline void Page::clear_fragment() {
  fragment_.Clear();
}
inline const ::Pages::Page_Fragment& Page::fragment(int index) const {
  return fragment_.Get(index);
}
inline ::Pages::Page_Fragment* Page::mutable_fragment(int index) {
  return fragment_.Mutable(index);
}
inline ::Pages::Page_Fragment* Page::add_fragment() {
  return fragment_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Pages::Page_Fragment >&
Page::fragment() const {
  return fragment_;
}
inline ::google::protobuf::RepeatedPtrField< ::Pages::Page_Fragment >*
Page::mutable_fragment() {
  return &fragment_;
}

// repeated .Pages.Date date = 4;
inline int Page::date_size() const {
  return date_.size();
}
inline void Page::clear_date() {
  date_.Clear();
}
inline const ::Pages::Date& Page::date(int index) const {
  return date_.Get(index);
}
inline ::Pages::Date* Page::mutable_date(int index) {
  return date_.Mutable(index);
}
inline ::Pages::Date* Page::add_date() {
  return date_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Pages::Date >&
Page::date() const {
  return date_;
}
inline ::google::protobuf::RepeatedPtrField< ::Pages::Date >*
Page::mutable_date() {
  return &date_;
}

// repeated .Pages.Author author = 5;
inline int Page::author_size() const {
  return author_.size();
}
inline void Page::clear_author() {
  author_.Clear();
}
inline const ::Pages::Author& Page::author(int index) const {
  return author_.Get(index);
}
inline ::Pages::Author* Page::mutable_author(int index) {
  return author_.Mutable(index);
}
inline ::Pages::Author* Page::add_author() {
  return author_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Pages::Author >&
Page::author() const {
  return author_;
}
inline ::google::protobuf::RepeatedPtrField< ::Pages::Author >*
Page::mutable_author() {
  return &author_;
}

// -------------------------------------------------------------------

// Author

// repeated string first = 1;
inline int Author::first_size() const {
  return first_.size();
}
inline void Author::clear_first() {
  first_.Clear();
}
inline const ::std::string& Author::first(int index) const {
  return first_.Get(index);
}
inline ::std::string* Author::mutable_first(int index) {
  return first_.Mutable(index);
}
inline void Author::set_first(int index, const ::std::string& value) {
  first_.Mutable(index)->assign(value);
}
inline void Author::set_first(int index, const char* value) {
  first_.Mutable(index)->assign(value);
}
inline void Author::set_first(int index, const char* value, size_t size) {
  first_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Author::add_first() {
  return first_.Add();
}
inline void Author::add_first(const ::std::string& value) {
  first_.Add()->assign(value);
}
inline void Author::add_first(const char* value) {
  first_.Add()->assign(value);
}
inline void Author::add_first(const char* value, size_t size) {
  first_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Author::first() const {
  return first_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Author::mutable_first() {
  return &first_;
}

// repeated string last = 2;
inline int Author::last_size() const {
  return last_.size();
}
inline void Author::clear_last() {
  last_.Clear();
}
inline const ::std::string& Author::last(int index) const {
  return last_.Get(index);
}
inline ::std::string* Author::mutable_last(int index) {
  return last_.Mutable(index);
}
inline void Author::set_last(int index, const ::std::string& value) {
  last_.Mutable(index)->assign(value);
}
inline void Author::set_last(int index, const char* value) {
  last_.Mutable(index)->assign(value);
}
inline void Author::set_last(int index, const char* value, size_t size) {
  last_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Author::add_last() {
  return last_.Add();
}
inline void Author::add_last(const ::std::string& value) {
  last_.Add()->assign(value);
}
inline void Author::add_last(const char* value) {
  last_.Add()->assign(value);
}
inline void Author::add_last(const char* value, size_t size) {
  last_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Author::last() const {
  return last_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Author::mutable_last() {
  return &last_;
}

// repeated string middle = 3;
inline int Author::middle_size() const {
  return middle_.size();
}
inline void Author::clear_middle() {
  middle_.Clear();
}
inline const ::std::string& Author::middle(int index) const {
  return middle_.Get(index);
}
inline ::std::string* Author::mutable_middle(int index) {
  return middle_.Mutable(index);
}
inline void Author::set_middle(int index, const ::std::string& value) {
  middle_.Mutable(index)->assign(value);
}
inline void Author::set_middle(int index, const char* value) {
  middle_.Mutable(index)->assign(value);
}
inline void Author::set_middle(int index, const char* value, size_t size) {
  middle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Author::add_middle() {
  return middle_.Add();
}
inline void Author::add_middle(const ::std::string& value) {
  middle_.Add()->assign(value);
}
inline void Author::add_middle(const char* value) {
  middle_.Add()->assign(value);
}
inline void Author::add_middle(const char* value, size_t size) {
  middle_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Author::middle() const {
  return middle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Author::mutable_middle() {
  return &middle_;
}

// -------------------------------------------------------------------

// Date

// optional uint32 year = 1;
inline bool Date::has_year() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Date::set_has_year() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Date::clear_has_year() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Date::clear_year() {
  year_ = 0u;
  clear_has_year();
}
inline ::google::protobuf::uint32 Date::year() const {
  return year_;
}
inline void Date::set_year(::google::protobuf::uint32 value) {
  set_has_year();
  year_ = value;
}

// optional uint32 month = 2;
inline bool Date::has_month() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Date::set_has_month() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Date::clear_has_month() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Date::clear_month() {
  month_ = 0u;
  clear_has_month();
}
inline ::google::protobuf::uint32 Date::month() const {
  return month_;
}
inline void Date::set_month(::google::protobuf::uint32 value) {
  set_has_month();
  month_ = value;
}

// optional uint32 day = 3;
inline bool Date::has_day() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Date::set_has_day() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Date::clear_has_day() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Date::clear_day() {
  day_ = 0u;
  clear_has_day();
}
inline ::google::protobuf::uint32 Date::day() const {
  return day_;
}
inline void Date::set_day(::google::protobuf::uint32 value) {
  set_has_day();
  day_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Pages

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_docs_2eproto__INCLUDED
