// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Messages.proto

#ifndef PROTOBUF_Messages_2eproto__INCLUDED
#define PROTOBUF_Messages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace Message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Messages_2eproto();
void protobuf_AssignDesc_Messages_2eproto();
void protobuf_ShutdownFile_Messages_2eproto();

class SearchResult;
class SearchResult_Hit;
class NearbyHits;
class NearbyHits_NearbyHit;
class Results;
class Results_Result;

// ===================================================================

class SearchResult_Hit : public ::google::protobuf::Message {
 public:
  SearchResult_Hit();
  virtual ~SearchResult_Hit();
  
  SearchResult_Hit(const SearchResult_Hit& from);
  
  inline SearchResult_Hit& operator=(const SearchResult_Hit& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchResult_Hit& default_instance();
  
  void Swap(SearchResult_Hit* other);
  
  // implements Message ----------------------------------------------
  
  SearchResult_Hit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchResult_Hit& from);
  void MergeFrom(const SearchResult_Hit& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string pageuri = 1;
  inline bool has_pageuri() const;
  inline void clear_pageuri();
  static const int kPageuriFieldNumber = 1;
  inline const ::std::string& pageuri() const;
  inline void set_pageuri(const ::std::string& value);
  inline void set_pageuri(const char* value);
  inline void set_pageuri(const char* value, size_t size);
  inline ::std::string* mutable_pageuri();
  inline ::std::string* release_pageuri();
  
  // optional uint32 idx = 2;
  inline bool has_idx() const;
  inline void clear_idx();
  static const int kIdxFieldNumber = 2;
  inline ::google::protobuf::uint32 idx() const;
  inline void set_idx(::google::protobuf::uint32 value);
  
  // required uint32 fragment = 3;
  inline bool has_fragment() const;
  inline void clear_fragment();
  static const int kFragmentFieldNumber = 3;
  inline ::google::protobuf::uint32 fragment() const;
  inline void set_fragment(::google::protobuf::uint32 value);
  
  // repeated uint32 offset = 4 [packed = true];
  inline int offset_size() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 4;
  inline ::google::protobuf::uint32 offset(int index) const;
  inline void set_offset(int index, ::google::protobuf::uint32 value);
  inline void add_offset(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      offset() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_offset();
  
  // repeated uint32 length = 5 [packed = true];
  inline int length_size() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 5;
  inline ::google::protobuf::uint32 length(int index) const;
  inline void set_length(int index, ::google::protobuf::uint32 value);
  inline void add_length(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      length() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_length();
  
  // @@protoc_insertion_point(class_scope:Message.SearchResult.Hit)
 private:
  inline void set_has_pageuri();
  inline void clear_has_pageuri();
  inline void set_has_idx();
  inline void clear_has_idx();
  inline void set_has_fragment();
  inline void clear_has_fragment();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* pageuri_;
  ::google::protobuf::uint32 idx_;
  ::google::protobuf::uint32 fragment_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > offset_;
  mutable int _offset_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > length_;
  mutable int _length_cached_byte_size_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_Messages_2eproto();
  friend void protobuf_AssignDesc_Messages_2eproto();
  friend void protobuf_ShutdownFile_Messages_2eproto();
  
  void InitAsDefaultInstance();
  static SearchResult_Hit* default_instance_;
};
// -------------------------------------------------------------------

class SearchResult : public ::google::protobuf::Message {
 public:
  SearchResult();
  virtual ~SearchResult();
  
  SearchResult(const SearchResult& from);
  
  inline SearchResult& operator=(const SearchResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchResult& default_instance();
  
  void Swap(SearchResult* other);
  
  // implements Message ----------------------------------------------
  
  SearchResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchResult& from);
  void MergeFrom(const SearchResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef SearchResult_Hit Hit;
  
  // accessors -------------------------------------------------------
  
  // required string term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline const ::std::string& term() const;
  inline void set_term(const ::std::string& value);
  inline void set_term(const char* value);
  inline void set_term(const char* value, size_t size);
  inline ::std::string* mutable_term();
  inline ::std::string* release_term();
  
  // optional uint32 numHits = 2;
  inline bool has_numhits() const;
  inline void clear_numhits();
  static const int kNumHitsFieldNumber = 2;
  inline ::google::protobuf::uint32 numhits() const;
  inline void set_numhits(::google::protobuf::uint32 value);
  
  // repeated .Message.SearchResult.Hit hits = 3;
  inline int hits_size() const;
  inline void clear_hits();
  static const int kHitsFieldNumber = 3;
  inline const ::Message::SearchResult_Hit& hits(int index) const;
  inline ::Message::SearchResult_Hit* mutable_hits(int index);
  inline ::Message::SearchResult_Hit* add_hits();
  inline const ::google::protobuf::RepeatedPtrField< ::Message::SearchResult_Hit >&
      hits() const;
  inline ::google::protobuf::RepeatedPtrField< ::Message::SearchResult_Hit >*
      mutable_hits();
  
  // @@protoc_insertion_point(class_scope:Message.SearchResult)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_numhits();
  inline void clear_has_numhits();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* term_;
  ::google::protobuf::RepeatedPtrField< ::Message::SearchResult_Hit > hits_;
  ::google::protobuf::uint32 numhits_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Messages_2eproto();
  friend void protobuf_AssignDesc_Messages_2eproto();
  friend void protobuf_ShutdownFile_Messages_2eproto();
  
  void InitAsDefaultInstance();
  static SearchResult* default_instance_;
};
// -------------------------------------------------------------------

class NearbyHits_NearbyHit : public ::google::protobuf::Message {
 public:
  NearbyHits_NearbyHit();
  virtual ~NearbyHits_NearbyHit();
  
  NearbyHits_NearbyHit(const NearbyHits_NearbyHit& from);
  
  inline NearbyHits_NearbyHit& operator=(const NearbyHits_NearbyHit& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NearbyHits_NearbyHit& default_instance();
  
  void Swap(NearbyHits_NearbyHit* other);
  
  // implements Message ----------------------------------------------
  
  NearbyHits_NearbyHit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NearbyHits_NearbyHit& from);
  void MergeFrom(const NearbyHits_NearbyHit& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string pageuri = 1;
  inline bool has_pageuri() const;
  inline void clear_pageuri();
  static const int kPageuriFieldNumber = 1;
  inline const ::std::string& pageuri() const;
  inline void set_pageuri(const ::std::string& value);
  inline void set_pageuri(const char* value);
  inline void set_pageuri(const char* value, size_t size);
  inline ::std::string* mutable_pageuri();
  inline ::std::string* release_pageuri();
  
  // required uint32 fragment = 2;
  inline bool has_fragment() const;
  inline void clear_fragment();
  static const int kFragmentFieldNumber = 2;
  inline ::google::protobuf::uint32 fragment() const;
  inline void set_fragment(::google::protobuf::uint32 value);
  
  // repeated uint32 offset1 = 4 [packed = true];
  inline int offset1_size() const;
  inline void clear_offset1();
  static const int kOffset1FieldNumber = 4;
  inline ::google::protobuf::uint32 offset1(int index) const;
  inline void set_offset1(int index, ::google::protobuf::uint32 value);
  inline void add_offset1(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      offset1() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_offset1();
  
  // optional uint32 length1 = 5;
  inline bool has_length1() const;
  inline void clear_length1();
  static const int kLength1FieldNumber = 5;
  inline ::google::protobuf::uint32 length1() const;
  inline void set_length1(::google::protobuf::uint32 value);
  
  // repeated uint32 offset2 = 6 [packed = true];
  inline int offset2_size() const;
  inline void clear_offset2();
  static const int kOffset2FieldNumber = 6;
  inline ::google::protobuf::uint32 offset2(int index) const;
  inline void set_offset2(int index, ::google::protobuf::uint32 value);
  inline void add_offset2(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      offset2() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_offset2();
  
  // optional uint32 length2 = 7;
  inline bool has_length2() const;
  inline void clear_length2();
  static const int kLength2FieldNumber = 7;
  inline ::google::protobuf::uint32 length2() const;
  inline void set_length2(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:Message.NearbyHits.NearbyHit)
 private:
  inline void set_has_pageuri();
  inline void clear_has_pageuri();
  inline void set_has_fragment();
  inline void clear_has_fragment();
  inline void set_has_length1();
  inline void clear_has_length1();
  inline void set_has_length2();
  inline void clear_has_length2();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* pageuri_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > offset1_;
  mutable int _offset1_cached_byte_size_;
  ::google::protobuf::uint32 fragment_;
  ::google::protobuf::uint32 length1_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > offset2_;
  mutable int _offset2_cached_byte_size_;
  ::google::protobuf::uint32 length2_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_Messages_2eproto();
  friend void protobuf_AssignDesc_Messages_2eproto();
  friend void protobuf_ShutdownFile_Messages_2eproto();
  
  void InitAsDefaultInstance();
  static NearbyHits_NearbyHit* default_instance_;
};
// -------------------------------------------------------------------

class NearbyHits : public ::google::protobuf::Message {
 public:
  NearbyHits();
  virtual ~NearbyHits();
  
  NearbyHits(const NearbyHits& from);
  
  inline NearbyHits& operator=(const NearbyHits& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NearbyHits& default_instance();
  
  void Swap(NearbyHits* other);
  
  // implements Message ----------------------------------------------
  
  NearbyHits* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NearbyHits& from);
  void MergeFrom(const NearbyHits& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NearbyHits_NearbyHit NearbyHit;
  
  // accessors -------------------------------------------------------
  
  // required string term1 = 1;
  inline bool has_term1() const;
  inline void clear_term1();
  static const int kTerm1FieldNumber = 1;
  inline const ::std::string& term1() const;
  inline void set_term1(const ::std::string& value);
  inline void set_term1(const char* value);
  inline void set_term1(const char* value, size_t size);
  inline ::std::string* mutable_term1();
  inline ::std::string* release_term1();
  
  // required string term2 = 2;
  inline bool has_term2() const;
  inline void clear_term2();
  static const int kTerm2FieldNumber = 2;
  inline const ::std::string& term2() const;
  inline void set_term2(const ::std::string& value);
  inline void set_term2(const char* value);
  inline void set_term2(const char* value, size_t size);
  inline ::std::string* mutable_term2();
  inline ::std::string* release_term2();
  
  // repeated .Message.NearbyHits nearbyhits = 3;
  inline int nearbyhits_size() const;
  inline void clear_nearbyhits();
  static const int kNearbyhitsFieldNumber = 3;
  inline const ::Message::NearbyHits& nearbyhits(int index) const;
  inline ::Message::NearbyHits* mutable_nearbyhits(int index);
  inline ::Message::NearbyHits* add_nearbyhits();
  inline const ::google::protobuf::RepeatedPtrField< ::Message::NearbyHits >&
      nearbyhits() const;
  inline ::google::protobuf::RepeatedPtrField< ::Message::NearbyHits >*
      mutable_nearbyhits();
  
  // @@protoc_insertion_point(class_scope:Message.NearbyHits)
 private:
  inline void set_has_term1();
  inline void clear_has_term1();
  inline void set_has_term2();
  inline void clear_has_term2();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* term1_;
  ::std::string* term2_;
  ::google::protobuf::RepeatedPtrField< ::Message::NearbyHits > nearbyhits_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Messages_2eproto();
  friend void protobuf_AssignDesc_Messages_2eproto();
  friend void protobuf_ShutdownFile_Messages_2eproto();
  
  void InitAsDefaultInstance();
  static NearbyHits* default_instance_;
};
// -------------------------------------------------------------------

class Results_Result : public ::google::protobuf::Message {
 public:
  Results_Result();
  virtual ~Results_Result();
  
  Results_Result(const Results_Result& from);
  
  inline Results_Result& operator=(const Results_Result& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Results_Result& default_instance();
  
  void Swap(Results_Result* other);
  
  // implements Message ----------------------------------------------
  
  Results_Result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Results_Result& from);
  void MergeFrom(const Results_Result& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string pageuri = 1;
  inline bool has_pageuri() const;
  inline void clear_pageuri();
  static const int kPageuriFieldNumber = 1;
  inline const ::std::string& pageuri() const;
  inline void set_pageuri(const ::std::string& value);
  inline void set_pageuri(const char* value);
  inline void set_pageuri(const char* value, size_t size);
  inline ::std::string* mutable_pageuri();
  inline ::std::string* release_pageuri();
  
  // required string term1 = 2;
  inline bool has_term1() const;
  inline void clear_term1();
  static const int kTerm1FieldNumber = 2;
  inline const ::std::string& term1() const;
  inline void set_term1(const ::std::string& value);
  inline void set_term1(const char* value);
  inline void set_term1(const char* value, size_t size);
  inline ::std::string* mutable_term1();
  inline ::std::string* release_term1();
  
  // required string term2 = 3;
  inline bool has_term2() const;
  inline void clear_term2();
  static const int kTerm2FieldNumber = 3;
  inline const ::std::string& term2() const;
  inline void set_term2(const ::std::string& value);
  inline void set_term2(const char* value);
  inline void set_term2(const char* value, size_t size);
  inline ::std::string* mutable_term2();
  inline ::std::string* release_term2();
  
  // @@protoc_insertion_point(class_scope:Message.Results.Result)
 private:
  inline void set_has_pageuri();
  inline void clear_has_pageuri();
  inline void set_has_term1();
  inline void clear_has_term1();
  inline void set_has_term2();
  inline void clear_has_term2();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* pageuri_;
  ::std::string* term1_;
  ::std::string* term2_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Messages_2eproto();
  friend void protobuf_AssignDesc_Messages_2eproto();
  friend void protobuf_ShutdownFile_Messages_2eproto();
  
  void InitAsDefaultInstance();
  static Results_Result* default_instance_;
};
// -------------------------------------------------------------------

class Results : public ::google::protobuf::Message {
 public:
  Results();
  virtual ~Results();
  
  Results(const Results& from);
  
  inline Results& operator=(const Results& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Results& default_instance();
  
  void Swap(Results* other);
  
  // implements Message ----------------------------------------------
  
  Results* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Results& from);
  void MergeFrom(const Results& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Results_Result Result;
  
  // accessors -------------------------------------------------------
  
  // repeated .Message.Results.Result results = 1;
  inline int results_size() const;
  inline void clear_results();
  static const int kResultsFieldNumber = 1;
  inline const ::Message::Results_Result& results(int index) const;
  inline ::Message::Results_Result* mutable_results(int index);
  inline ::Message::Results_Result* add_results();
  inline const ::google::protobuf::RepeatedPtrField< ::Message::Results_Result >&
      results() const;
  inline ::google::protobuf::RepeatedPtrField< ::Message::Results_Result >*
      mutable_results();
  
  // optional uint32 numResults = 2;
  inline bool has_numresults() const;
  inline void clear_numresults();
  static const int kNumResultsFieldNumber = 2;
  inline ::google::protobuf::uint32 numresults() const;
  inline void set_numresults(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:Message.Results)
 private:
  inline void set_has_numresults();
  inline void clear_has_numresults();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Message::Results_Result > results_;
  ::google::protobuf::uint32 numresults_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Messages_2eproto();
  friend void protobuf_AssignDesc_Messages_2eproto();
  friend void protobuf_ShutdownFile_Messages_2eproto();
  
  void InitAsDefaultInstance();
  static Results* default_instance_;
};
// ===================================================================


// ===================================================================

// SearchResult_Hit

// required string pageuri = 1;
inline bool SearchResult_Hit::has_pageuri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SearchResult_Hit::set_has_pageuri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SearchResult_Hit::clear_has_pageuri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SearchResult_Hit::clear_pageuri() {
  if (pageuri_ != &::google::protobuf::internal::kEmptyString) {
    pageuri_->clear();
  }
  clear_has_pageuri();
}
inline const ::std::string& SearchResult_Hit::pageuri() const {
  return *pageuri_;
}
inline void SearchResult_Hit::set_pageuri(const ::std::string& value) {
  set_has_pageuri();
  if (pageuri_ == &::google::protobuf::internal::kEmptyString) {
    pageuri_ = new ::std::string;
  }
  pageuri_->assign(value);
}
inline void SearchResult_Hit::set_pageuri(const char* value) {
  set_has_pageuri();
  if (pageuri_ == &::google::protobuf::internal::kEmptyString) {
    pageuri_ = new ::std::string;
  }
  pageuri_->assign(value);
}
inline void SearchResult_Hit::set_pageuri(const char* value, size_t size) {
  set_has_pageuri();
  if (pageuri_ == &::google::protobuf::internal::kEmptyString) {
    pageuri_ = new ::std::string;
  }
  pageuri_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchResult_Hit::mutable_pageuri() {
  set_has_pageuri();
  if (pageuri_ == &::google::protobuf::internal::kEmptyString) {
    pageuri_ = new ::std::string;
  }
  return pageuri_;
}
inline ::std::string* SearchResult_Hit::release_pageuri() {
  clear_has_pageuri();
  if (pageuri_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pageuri_;
    pageuri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 idx = 2;
inline bool SearchResult_Hit::has_idx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SearchResult_Hit::set_has_idx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SearchResult_Hit::clear_has_idx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SearchResult_Hit::clear_idx() {
  idx_ = 0u;
  clear_has_idx();
}
inline ::google::protobuf::uint32 SearchResult_Hit::idx() const {
  return idx_;
}
inline void SearchResult_Hit::set_idx(::google::protobuf::uint32 value) {
  set_has_idx();
  idx_ = value;
}

// required uint32 fragment = 3;
inline bool SearchResult_Hit::has_fragment() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SearchResult_Hit::set_has_fragment() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SearchResult_Hit::clear_has_fragment() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SearchResult_Hit::clear_fragment() {
  fragment_ = 0u;
  clear_has_fragment();
}
inline ::google::protobuf::uint32 SearchResult_Hit::fragment() const {
  return fragment_;
}
inline void SearchResult_Hit::set_fragment(::google::protobuf::uint32 value) {
  set_has_fragment();
  fragment_ = value;
}

// repeated uint32 offset = 4 [packed = true];
inline int SearchResult_Hit::offset_size() const {
  return offset_.size();
}
inline void SearchResult_Hit::clear_offset() {
  offset_.Clear();
}
inline ::google::protobuf::uint32 SearchResult_Hit::offset(int index) const {
  return offset_.Get(index);
}
inline void SearchResult_Hit::set_offset(int index, ::google::protobuf::uint32 value) {
  offset_.Set(index, value);
}
inline void SearchResult_Hit::add_offset(::google::protobuf::uint32 value) {
  offset_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SearchResult_Hit::offset() const {
  return offset_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SearchResult_Hit::mutable_offset() {
  return &offset_;
}

// repeated uint32 length = 5 [packed = true];
inline int SearchResult_Hit::length_size() const {
  return length_.size();
}
inline void SearchResult_Hit::clear_length() {
  length_.Clear();
}
inline ::google::protobuf::uint32 SearchResult_Hit::length(int index) const {
  return length_.Get(index);
}
inline void SearchResult_Hit::set_length(int index, ::google::protobuf::uint32 value) {
  length_.Set(index, value);
}
inline void SearchResult_Hit::add_length(::google::protobuf::uint32 value) {
  length_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SearchResult_Hit::length() const {
  return length_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SearchResult_Hit::mutable_length() {
  return &length_;
}

// -------------------------------------------------------------------

// SearchResult

// required string term = 1;
inline bool SearchResult::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SearchResult::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SearchResult::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SearchResult::clear_term() {
  if (term_ != &::google::protobuf::internal::kEmptyString) {
    term_->clear();
  }
  clear_has_term();
}
inline const ::std::string& SearchResult::term() const {
  return *term_;
}
inline void SearchResult::set_term(const ::std::string& value) {
  set_has_term();
  if (term_ == &::google::protobuf::internal::kEmptyString) {
    term_ = new ::std::string;
  }
  term_->assign(value);
}
inline void SearchResult::set_term(const char* value) {
  set_has_term();
  if (term_ == &::google::protobuf::internal::kEmptyString) {
    term_ = new ::std::string;
  }
  term_->assign(value);
}
inline void SearchResult::set_term(const char* value, size_t size) {
  set_has_term();
  if (term_ == &::google::protobuf::internal::kEmptyString) {
    term_ = new ::std::string;
  }
  term_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchResult::mutable_term() {
  set_has_term();
  if (term_ == &::google::protobuf::internal::kEmptyString) {
    term_ = new ::std::string;
  }
  return term_;
}
inline ::std::string* SearchResult::release_term() {
  clear_has_term();
  if (term_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = term_;
    term_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 numHits = 2;
inline bool SearchResult::has_numhits() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SearchResult::set_has_numhits() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SearchResult::clear_has_numhits() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SearchResult::clear_numhits() {
  numhits_ = 0u;
  clear_has_numhits();
}
inline ::google::protobuf::uint32 SearchResult::numhits() const {
  return numhits_;
}
inline void SearchResult::set_numhits(::google::protobuf::uint32 value) {
  set_has_numhits();
  numhits_ = value;
}

// repeated .Message.SearchResult.Hit hits = 3;
inline int SearchResult::hits_size() const {
  return hits_.size();
}
inline void SearchResult::clear_hits() {
  hits_.Clear();
}
inline const ::Message::SearchResult_Hit& SearchResult::hits(int index) const {
  return hits_.Get(index);
}
inline ::Message::SearchResult_Hit* SearchResult::mutable_hits(int index) {
  return hits_.Mutable(index);
}
inline ::Message::SearchResult_Hit* SearchResult::add_hits() {
  return hits_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Message::SearchResult_Hit >&
SearchResult::hits() const {
  return hits_;
}
inline ::google::protobuf::RepeatedPtrField< ::Message::SearchResult_Hit >*
SearchResult::mutable_hits() {
  return &hits_;
}

// -------------------------------------------------------------------

// NearbyHits_NearbyHit

// required string pageuri = 1;
inline bool NearbyHits_NearbyHit::has_pageuri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NearbyHits_NearbyHit::set_has_pageuri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NearbyHits_NearbyHit::clear_has_pageuri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NearbyHits_NearbyHit::clear_pageuri() {
  if (pageuri_ != &::google::protobuf::internal::kEmptyString) {
    pageuri_->clear();
  }
  clear_has_pageuri();
}
inline const ::std::string& NearbyHits_NearbyHit::pageuri() const {
  return *pageuri_;
}
inline void NearbyHits_NearbyHit::set_pageuri(const ::std::string& value) {
  set_has_pageuri();
  if (pageuri_ == &::google::protobuf::internal::kEmptyString) {
    pageuri_ = new ::std::string;
  }
  pageuri_->assign(value);
}
inline void NearbyHits_NearbyHit::set_pageuri(const char* value) {
  set_has_pageuri();
  if (pageuri_ == &::google::protobuf::internal::kEmptyString) {
    pageuri_ = new ::std::string;
  }
  pageuri_->assign(value);
}
inline void NearbyHits_NearbyHit::set_pageuri(const char* value, size_t size) {
  set_has_pageuri();
  if (pageuri_ == &::google::protobuf::internal::kEmptyString) {
    pageuri_ = new ::std::string;
  }
  pageuri_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NearbyHits_NearbyHit::mutable_pageuri() {
  set_has_pageuri();
  if (pageuri_ == &::google::protobuf::internal::kEmptyString) {
    pageuri_ = new ::std::string;
  }
  return pageuri_;
}
inline ::std::string* NearbyHits_NearbyHit::release_pageuri() {
  clear_has_pageuri();
  if (pageuri_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pageuri_;
    pageuri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 fragment = 2;
inline bool NearbyHits_NearbyHit::has_fragment() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NearbyHits_NearbyHit::set_has_fragment() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NearbyHits_NearbyHit::clear_has_fragment() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NearbyHits_NearbyHit::clear_fragment() {
  fragment_ = 0u;
  clear_has_fragment();
}
inline ::google::protobuf::uint32 NearbyHits_NearbyHit::fragment() const {
  return fragment_;
}
inline void NearbyHits_NearbyHit::set_fragment(::google::protobuf::uint32 value) {
  set_has_fragment();
  fragment_ = value;
}

// repeated uint32 offset1 = 4 [packed = true];
inline int NearbyHits_NearbyHit::offset1_size() const {
  return offset1_.size();
}
inline void NearbyHits_NearbyHit::clear_offset1() {
  offset1_.Clear();
}
inline ::google::protobuf::uint32 NearbyHits_NearbyHit::offset1(int index) const {
  return offset1_.Get(index);
}
inline void NearbyHits_NearbyHit::set_offset1(int index, ::google::protobuf::uint32 value) {
  offset1_.Set(index, value);
}
inline void NearbyHits_NearbyHit::add_offset1(::google::protobuf::uint32 value) {
  offset1_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
NearbyHits_NearbyHit::offset1() const {
  return offset1_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
NearbyHits_NearbyHit::mutable_offset1() {
  return &offset1_;
}

// optional uint32 length1 = 5;
inline bool NearbyHits_NearbyHit::has_length1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NearbyHits_NearbyHit::set_has_length1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NearbyHits_NearbyHit::clear_has_length1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NearbyHits_NearbyHit::clear_length1() {
  length1_ = 0u;
  clear_has_length1();
}
inline ::google::protobuf::uint32 NearbyHits_NearbyHit::length1() const {
  return length1_;
}
inline void NearbyHits_NearbyHit::set_length1(::google::protobuf::uint32 value) {
  set_has_length1();
  length1_ = value;
}

// repeated uint32 offset2 = 6 [packed = true];
inline int NearbyHits_NearbyHit::offset2_size() const {
  return offset2_.size();
}
inline void NearbyHits_NearbyHit::clear_offset2() {
  offset2_.Clear();
}
inline ::google::protobuf::uint32 NearbyHits_NearbyHit::offset2(int index) const {
  return offset2_.Get(index);
}
inline void NearbyHits_NearbyHit::set_offset2(int index, ::google::protobuf::uint32 value) {
  offset2_.Set(index, value);
}
inline void NearbyHits_NearbyHit::add_offset2(::google::protobuf::uint32 value) {
  offset2_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
NearbyHits_NearbyHit::offset2() const {
  return offset2_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
NearbyHits_NearbyHit::mutable_offset2() {
  return &offset2_;
}

// optional uint32 length2 = 7;
inline bool NearbyHits_NearbyHit::has_length2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NearbyHits_NearbyHit::set_has_length2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NearbyHits_NearbyHit::clear_has_length2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NearbyHits_NearbyHit::clear_length2() {
  length2_ = 0u;
  clear_has_length2();
}
inline ::google::protobuf::uint32 NearbyHits_NearbyHit::length2() const {
  return length2_;
}
inline void NearbyHits_NearbyHit::set_length2(::google::protobuf::uint32 value) {
  set_has_length2();
  length2_ = value;
}

// -------------------------------------------------------------------

// NearbyHits

// required string term1 = 1;
inline bool NearbyHits::has_term1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NearbyHits::set_has_term1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NearbyHits::clear_has_term1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NearbyHits::clear_term1() {
  if (term1_ != &::google::protobuf::internal::kEmptyString) {
    term1_->clear();
  }
  clear_has_term1();
}
inline const ::std::string& NearbyHits::term1() const {
  return *term1_;
}
inline void NearbyHits::set_term1(const ::std::string& value) {
  set_has_term1();
  if (term1_ == &::google::protobuf::internal::kEmptyString) {
    term1_ = new ::std::string;
  }
  term1_->assign(value);
}
inline void NearbyHits::set_term1(const char* value) {
  set_has_term1();
  if (term1_ == &::google::protobuf::internal::kEmptyString) {
    term1_ = new ::std::string;
  }
  term1_->assign(value);
}
inline void NearbyHits::set_term1(const char* value, size_t size) {
  set_has_term1();
  if (term1_ == &::google::protobuf::internal::kEmptyString) {
    term1_ = new ::std::string;
  }
  term1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NearbyHits::mutable_term1() {
  set_has_term1();
  if (term1_ == &::google::protobuf::internal::kEmptyString) {
    term1_ = new ::std::string;
  }
  return term1_;
}
inline ::std::string* NearbyHits::release_term1() {
  clear_has_term1();
  if (term1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = term1_;
    term1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string term2 = 2;
inline bool NearbyHits::has_term2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NearbyHits::set_has_term2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NearbyHits::clear_has_term2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NearbyHits::clear_term2() {
  if (term2_ != &::google::protobuf::internal::kEmptyString) {
    term2_->clear();
  }
  clear_has_term2();
}
inline const ::std::string& NearbyHits::term2() const {
  return *term2_;
}
inline void NearbyHits::set_term2(const ::std::string& value) {
  set_has_term2();
  if (term2_ == &::google::protobuf::internal::kEmptyString) {
    term2_ = new ::std::string;
  }
  term2_->assign(value);
}
inline void NearbyHits::set_term2(const char* value) {
  set_has_term2();
  if (term2_ == &::google::protobuf::internal::kEmptyString) {
    term2_ = new ::std::string;
  }
  term2_->assign(value);
}
inline void NearbyHits::set_term2(const char* value, size_t size) {
  set_has_term2();
  if (term2_ == &::google::protobuf::internal::kEmptyString) {
    term2_ = new ::std::string;
  }
  term2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NearbyHits::mutable_term2() {
  set_has_term2();
  if (term2_ == &::google::protobuf::internal::kEmptyString) {
    term2_ = new ::std::string;
  }
  return term2_;
}
inline ::std::string* NearbyHits::release_term2() {
  clear_has_term2();
  if (term2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = term2_;
    term2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .Message.NearbyHits nearbyhits = 3;
inline int NearbyHits::nearbyhits_size() const {
  return nearbyhits_.size();
}
inline void NearbyHits::clear_nearbyhits() {
  nearbyhits_.Clear();
}
inline const ::Message::NearbyHits& NearbyHits::nearbyhits(int index) const {
  return nearbyhits_.Get(index);
}
inline ::Message::NearbyHits* NearbyHits::mutable_nearbyhits(int index) {
  return nearbyhits_.Mutable(index);
}
inline ::Message::NearbyHits* NearbyHits::add_nearbyhits() {
  return nearbyhits_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Message::NearbyHits >&
NearbyHits::nearbyhits() const {
  return nearbyhits_;
}
inline ::google::protobuf::RepeatedPtrField< ::Message::NearbyHits >*
NearbyHits::mutable_nearbyhits() {
  return &nearbyhits_;
}

// -------------------------------------------------------------------

// Results_Result

// required string pageuri = 1;
inline bool Results_Result::has_pageuri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Results_Result::set_has_pageuri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Results_Result::clear_has_pageuri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Results_Result::clear_pageuri() {
  if (pageuri_ != &::google::protobuf::internal::kEmptyString) {
    pageuri_->clear();
  }
  clear_has_pageuri();
}
inline const ::std::string& Results_Result::pageuri() const {
  return *pageuri_;
}
inline void Results_Result::set_pageuri(const ::std::string& value) {
  set_has_pageuri();
  if (pageuri_ == &::google::protobuf::internal::kEmptyString) {
    pageuri_ = new ::std::string;
  }
  pageuri_->assign(value);
}
inline void Results_Result::set_pageuri(const char* value) {
  set_has_pageuri();
  if (pageuri_ == &::google::protobuf::internal::kEmptyString) {
    pageuri_ = new ::std::string;
  }
  pageuri_->assign(value);
}
inline void Results_Result::set_pageuri(const char* value, size_t size) {
  set_has_pageuri();
  if (pageuri_ == &::google::protobuf::internal::kEmptyString) {
    pageuri_ = new ::std::string;
  }
  pageuri_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Results_Result::mutable_pageuri() {
  set_has_pageuri();
  if (pageuri_ == &::google::protobuf::internal::kEmptyString) {
    pageuri_ = new ::std::string;
  }
  return pageuri_;
}
inline ::std::string* Results_Result::release_pageuri() {
  clear_has_pageuri();
  if (pageuri_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pageuri_;
    pageuri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string term1 = 2;
inline bool Results_Result::has_term1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Results_Result::set_has_term1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Results_Result::clear_has_term1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Results_Result::clear_term1() {
  if (term1_ != &::google::protobuf::internal::kEmptyString) {
    term1_->clear();
  }
  clear_has_term1();
}
inline const ::std::string& Results_Result::term1() const {
  return *term1_;
}
inline void Results_Result::set_term1(const ::std::string& value) {
  set_has_term1();
  if (term1_ == &::google::protobuf::internal::kEmptyString) {
    term1_ = new ::std::string;
  }
  term1_->assign(value);
}
inline void Results_Result::set_term1(const char* value) {
  set_has_term1();
  if (term1_ == &::google::protobuf::internal::kEmptyString) {
    term1_ = new ::std::string;
  }
  term1_->assign(value);
}
inline void Results_Result::set_term1(const char* value, size_t size) {
  set_has_term1();
  if (term1_ == &::google::protobuf::internal::kEmptyString) {
    term1_ = new ::std::string;
  }
  term1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Results_Result::mutable_term1() {
  set_has_term1();
  if (term1_ == &::google::protobuf::internal::kEmptyString) {
    term1_ = new ::std::string;
  }
  return term1_;
}
inline ::std::string* Results_Result::release_term1() {
  clear_has_term1();
  if (term1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = term1_;
    term1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string term2 = 3;
inline bool Results_Result::has_term2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Results_Result::set_has_term2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Results_Result::clear_has_term2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Results_Result::clear_term2() {
  if (term2_ != &::google::protobuf::internal::kEmptyString) {
    term2_->clear();
  }
  clear_has_term2();
}
inline const ::std::string& Results_Result::term2() const {
  return *term2_;
}
inline void Results_Result::set_term2(const ::std::string& value) {
  set_has_term2();
  if (term2_ == &::google::protobuf::internal::kEmptyString) {
    term2_ = new ::std::string;
  }
  term2_->assign(value);
}
inline void Results_Result::set_term2(const char* value) {
  set_has_term2();
  if (term2_ == &::google::protobuf::internal::kEmptyString) {
    term2_ = new ::std::string;
  }
  term2_->assign(value);
}
inline void Results_Result::set_term2(const char* value, size_t size) {
  set_has_term2();
  if (term2_ == &::google::protobuf::internal::kEmptyString) {
    term2_ = new ::std::string;
  }
  term2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Results_Result::mutable_term2() {
  set_has_term2();
  if (term2_ == &::google::protobuf::internal::kEmptyString) {
    term2_ = new ::std::string;
  }
  return term2_;
}
inline ::std::string* Results_Result::release_term2() {
  clear_has_term2();
  if (term2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = term2_;
    term2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Results

// repeated .Message.Results.Result results = 1;
inline int Results::results_size() const {
  return results_.size();
}
inline void Results::clear_results() {
  results_.Clear();
}
inline const ::Message::Results_Result& Results::results(int index) const {
  return results_.Get(index);
}
inline ::Message::Results_Result* Results::mutable_results(int index) {
  return results_.Mutable(index);
}
inline ::Message::Results_Result* Results::add_results() {
  return results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Message::Results_Result >&
Results::results() const {
  return results_;
}
inline ::google::protobuf::RepeatedPtrField< ::Message::Results_Result >*
Results::mutable_results() {
  return &results_;
}

// optional uint32 numResults = 2;
inline bool Results::has_numresults() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Results::set_has_numresults() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Results::clear_has_numresults() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Results::clear_numresults() {
  numresults_ = 0u;
  clear_has_numresults();
}
inline ::google::protobuf::uint32 Results::numresults() const {
  return numresults_;
}
inline void Results::set_numresults(::google::protobuf::uint32 value) {
  set_has_numresults();
  numresults_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Messages_2eproto__INCLUDED
